#include "sort.h"

void quicksort_recursive(int *array, int lo, int hi, size_t size)
{
	int p;
	if (lo < hi)
	{
		p = partition_(array, lo, hi, size);
		quicksort_recursive(array, lo, p - 1, size);
		quicksort_recursive(array, p + 1, hi, size);
	}

}

void quick_sort(int *array, size_t size)
{
	if (array == NULL || size < 2)
		return;

	quicksort_recursive(array, 0, size - 1, size);

}


int partition_(int *array, int lo, int hi)
{
	int pivot = array[lo];

	int i, tmp;
	int cur = lo;

	for (i = lo + 1; i < hi; i++)
	{
		if (array[i] < pivot)
		{
			cur++;
			tmp = array[i];
			array[i] = array[cur];
			array[cur] = tmp;
			print_array(array, hi - lo + 1);
		}
	}
	tmp = array[cur];
	array[cur] = array[lo];
	array[lo] = tmp;
	print_array(array, hi - lo + 1);
	return (cur);
}
